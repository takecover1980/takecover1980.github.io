<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[withweb]]></title>
  <link href="http://blog.withweb.info/atom.xml" rel="self"/>
  <link href="http://blog.withweb.info/"/>
  <updated>2012-11-29T00:10:59+09:00</updated>
  <id>http://blog.withweb.info/</id>
  <author>
    <name><![CDATA[takecover1980]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressのプレビューにthinを使うと速くて快適になった]]></title>
    <link href="http://blog.withweb.info/blog/2012/11/29/octopress-preview-use-thin/"/>
    <updated>2012-11-29T00:10:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/11/29/octopress-preview-use-thin</id>
    <content type="html"><![CDATA[<p>なかなかお気に入りのOctopressですが、<code>rake preview</code>が妙に遅いのと「Could not determine&#8230;」ってログが鬱陶しいのが気になってました。</p>

<p>どうしたものかとググってみるとけっこう簡単に対策できるみたい。これはやらねばなるまい、というわけでメモ。</p>

<!-- more -->


<h2>やること</h2>

<p>どうやら遅いのも邪魔なログも原因はWEBrickらしい。WEBrickやめてthinを使うためにGemfileに追加します。</p>

<figure class='code'><figcaption><span>Gemfile.diff</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/Gemfile b/Gemfile</span>
</span><span class='line'><span class="gh">index be2518b..2df250f 100644</span>
</span><span class='line'><span class="gd">--- a/Gemfile</span>
</span><span class='line'><span class="gi">+++ b/Gemfile</span>
</span><span class='line'><span class="gu">@@ -13,6 +13,7 @@ group :development do</span>
</span><span class='line'>   gem &#39;rb-fsevent&#39;, &#39;~&gt; 0.9&#39;
</span><span class='line'>   gem &#39;stringex&#39;, &#39;~&gt; 1.4.0&#39;
</span><span class='line'>   gem &#39;liquid&#39;, &#39;~&gt; 2.3.0&#39;
</span><span class='line'><span class="gi">+  gem &#39;thin&#39;</span>
</span><span class='line'> end
</span><span class='line'>
</span><span class='line'> gem &#39;sinatra&#39;, &#39;~&gt; 1.3.2&#39;
</span></code></pre></td></tr></table></div></figure>


<p>thinを導入してパスを通します。</p>

<pre><code>$ bundle install
$ exec $SHELL
</code></pre>

<p>参考ページでは<code>thin start</code>で起動するかRakefile修正が必要な様ですが、いつも通りプレビューするだけでいけました。(バージョンが違うから？)</p>

<pre><code>$ rake preview
</code></pre>

<h2>参考ページ</h2>

<ul>
<li><a href="http://qiita.com/items/3cd2e2c84e7dcecbc22a">Octopressのプレビューにthinを使う #Octopress #Github - Qiita</a></li>
<li><a href="http://blog.glidenote.com/blog/2012/10/31/thin-octopress/">OctopressのRake Previewにthinを利用してプレビューを高速化する - Glide Note - グライドノート</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlayFramework2とYahoo!オークションAPIを使ってみた]]></title>
    <link href="http://blog.withweb.info/blog/2012/11/28/playframework-and-yahoo-auction-api/"/>
    <updated>2012-11-28T02:30:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/11/28/playframework-and-yahoo-auction-api</id>
    <content type="html"><![CDATA[<p>Yahoo!オークションAPIを使ってみたくなったので、とりあえず動くものを作ってみました。</p>

<ul>
<li><a href="http://auction.drive7.info">いまYahoo!オークションで人気の商品はコレ！</a></li>
</ul>


<p><img src="http://blog.withweb.info/images/20121128-auction-drive7-info.png" title="auction.drive7.info" alt="image auction.drive7.info" /></p>

<p>いかにもアフィリエイトっぽくてアレな感じのタイトルですね。実際アフィリエイトID使っています。</p>

<p>適当に用意したカテゴリから検索した結果をパネルっぽく表示して、クリックするとオークションのページに飛べます。</p>

<!-- more -->


<h2>準備</h2>

<p>だいたいの流れはYahoo!デベロッパーネットワークの<a href="http://developer.yahoo.co.jp/start/">ご利用ガイド</a>に手順が書いてありますが、他に必要になりそうなドキュメントはこのへんです。</p>

<ol>
<li><a href="http://developer.yahoo.co.jp/webapi/auctions/">APIドキュメント</a></li>
<li><a href="http://developer.yahoo.co.jp/sample/auctions/">サンプルコード</a></li>
<li><a href="http://developer.yahoo.co.jp/attribution/">クレジット表示</a></li>
</ol>


<p>2のサンプルコードのページにサンプルリクエストURLが載っているので、ブラウザのURLバーに入れる等で試せます。</p>

<p>アフィリエイトIDの確認と使い方は<a href="http://developer.yahoo.co.jp/appendix/auctions/affiliate.html">アフィリエイトプログラム</a>に書いてあります。Yahoo!ポイントで受け取るか、バリューコマースを使うか選べるようです。</p>

<h2>APIを使う</h2>

<p>JavascriptにアプリケーションIDを直書きするのはよくないかなぁと思ったので、Webサービスを作ります。</p>

<p>それだけならYahoo! Pipesで十分だと思いますが、今回は使いたいのでPlay使います。おおまかにはこんな感じです。</p>

<h3>Playframework2</h3>

<figure class='code'><figcaption><span>conf/routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>GET /yapi controllers.YahooAPI.auction(q: String ?= &quot;book&quot;)
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>controllers/YahooAPI.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.ws._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">YahooAPI</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">auction</span><span class="o">(</span><span class="n">q</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span> <span class="n">request</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">appid</span> <span class="k">=</span> <span class="s">&quot;YOUR_APPID&quot;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">baseurl</span> <span class="k">=</span> <span class="s">&quot;http://auctions.yahooapis.jp/AuctionWebService/V2/json/search&quot;</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">url</span> <span class="k">=</span> <span class="n">baseurl</span> <span class="o">+</span> <span class="s">&quot;?appid=&quot;</span> <span class="o">+</span> <span class="n">appid</span> <span class="o">+</span> <span class="s">&quot;&amp;query=&quot;</span> <span class="o">+</span> <span class="n">q</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">Async</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">WS</span><span class="o">.</span><span class="n">url</span><span class="o">(</span><span class="n">url</span><span class="o">).</span><span class="n">get</span><span class="o">().</span><span class="n">map</span> <span class="o">{</span> <span class="n">response</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="nc">Ok</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">).</span><span class="n">as</span><span class="o">(</span><span class="s">&quot;application/json&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>http://example.com/yapi?q=book</code>にアクセスするとbookの検索結果がJSONで返ってきます。</p>

<h3>jQuery</h3>

<figure class='code'><figcaption><span>script.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// API呼び出し</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;http://example.com/yapi&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;q&quot;</span><span class="o">:</span><span class="s2">&quot;ほげほげ&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">dataType</span><span class="o">:</span> <span class="s2">&quot;jsonp&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">complete</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// 終了時の処理</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// コールバック</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">loaded</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// API呼び出しの結果をゴニョゴニョする</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>取得した商品情報をレイアウトすれば完成です。</p>

<p>いろいろ手を抜いてます。アクセスが多いならYahooのサーバに優しくしておいた方がいいと思います。リクエストをキューでコントロールするとか、同一クエリは数秒キャッシュするとか、複数のアプリケーションIDでローテーションするとか。あ、最後のは違うか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPSにGitLabをインストール]]></title>
    <link href="http://blog.withweb.info/blog/2012/11/17/vps-gitlab-install/"/>
    <updated>2012-11-17T06:05:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/11/17/vps-gitlab-install</id>
    <content type="html"><![CDATA[<p>プライベートなリポジトリにBitbucketを使っているんですが、なんだかんだで使いにくい。そこで、お手軽とはいかないけど人気のGitHubクローンということで、GitLab使ってみます。</p>

<p><a href="https://github.com/gitlabhq/gitlabhq/blob/stable/doc/installation.md">プロジェクトページの手順</a>の通りにやればいいんだけど、ちょっと手を抜いて違う手順でインストールしたのでメモ。</p>

<!-- more -->


<h2>構成</h2>

<ul>
<li>CentOS 6.2</li>
<li>Ruby 1.9.3-p194</li>
<li>Gitolite 3.2</li>
<li>GitLab 3.0.3</li>
</ul>


<h2>準備</h2>

<p>とりあえず必要そうなのを入れます。足りない物があればbundle installで怒られると思うので都度入れていけばいいと思います。</p>

<pre><code>$ sudo yum install libxml2-devel libxslt-devel libicu-devel sqlite-devel redis
</code></pre>

<p>Redisを起動＋自動起動。いわゆるNoSQLってやつで、使うのは今回が初めて。</p>

<pre><code>$ sudo chkconfig redis on
$ sudo service redis start
</code></pre>

<p>GitoliteとGitLabのユーザを分けずにgitユーザだけで設定します。ここから先はgitユーザで作業します。</p>

<pre><code>$ sudo useradd git
$ sudo passwd git
$ su - git
</code></pre>

<p>rbenv派です。GitLabに合うバージョンのRubyが導入済みの場合は読み飛ばしてください。</p>

<pre><code>$ git clone http://github.com/sstephenson/rbenv.git ~/.rbenv
$ git clone http://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</code></pre>

<figure class='code'><figcaption><span>~/.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PATH=$HOME/.rbenv/bin:$PATH:$HOME/bin
</span><span class='line'>export PATH
</span><span class='line'>eval &quot;$(rbenv init -)&quot;
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ rbenv install 1.9.3-p194
$ rbenv global 1.9.3-p194
$ gem install bundler
$ rbenv rehash
</code></pre>

<h2>Gitoliteインストール</h2>

<p>SSHの鍵はgitlabとか分かりやすい名前にした方がいいかも。</p>

<pre><code>$ git config --global user.email "git@example.com"
$ git config --global user.name "gitadmin"
$ git clone git://github.com/sitaramc/gitolite
$ ssh-keygen -t rsa -N ""
$ gitolite/install
$ gitolite/src/gitolite setup -pk ~/.ssh/id_rsa.pub
$ chmod -R g+rwX repositories/
</code></pre>

<figure class='code'><figcaption><span>~/.gitolite.rc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>UMASK                       =&gt;  0007, # 0077 -&gt; 0007
</span><span class='line'>GIT_CONFIG_KEYS             =&gt;  &#39;.*&#39;, # &#39;&#39; -&gt; &#39;.*&#39;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Host localhost
</span><span class='line'>    Port &lt;SSHのポート番号&gt;
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ chmod 600 ~/.ssh/config
</code></pre>

<h2>GitLabインストール</h2>

<p>SQLite大好きなのでDBはSQLiteを使います。たぶんMySQL使う人が多いだろうけど。</p>

<pre><code>$ git clone -b stable git://github.com/gitlabhq/gitlabhq.git
$ cd gitlabhq
$ cp config/gitlab.yml.example config/gitlab.yml
$ cp config/database.yml.sqlite config/database.yml
</code></pre>

<p>環境に合わせてgitlab.ymlとdatabase.ymlを編集したらセットアップ。</p>

<pre><code>$ bundle install --without development test mysql postgres --deployment
$ bundle exec rake gitlab:app:setup RAILS_ENV=production
$ cp ./lib/hooks/post-receive ~/.gitolite/hooks/common/post-receive
$ chmod 750 /home/git/.gitolite
$ ./resque.sh
</code></pre>

<p>あとは手順どおりにWebサーバや起動スクリプトを設定すればOKです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPSにログ監視ツールlogwatchをインストール]]></title>
    <link href="http://blog.withweb.info/blog/2012/11/13/vps-logwatch/"/>
    <updated>2012-11-13T22:30:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/11/13/vps-logwatch</id>
    <content type="html"><![CDATA[<p>Linuxサーバのログを整形して管理者(root)に1日1回メール送信してくれるツールです。</p>

<p>メール送信なのでMTAが必要です。既に設定済の場合は読み飛ばしてください。</p>

<p>今回は個人的なサーバなので正直sSMTPで十分ですが、最近のLinuxならPostfixが標準だと思うのでそっちを使います。また、ドメインは信頼と実績のexample.comなので適時読み替えてください。外部からの受信、転送はしないのでDNSは触りません。</p>

<!-- more -->


<h2>インストール</h2>

<p>yumでサクッとインストール。</p>

<pre><code>$ sudo yum install -y postfix logwatch
</code></pre>

<h2>Postfixの設定</h2>

<p>ローカルと外向きにメール送信できるように以下を編集します。メールボックスはMaildir形式。</p>

<figure class='code'><figcaption><span>/etc/postfix/main.cf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>myhostname = mail.example.com                                           // 自FQDN名
</span><span class='line'>mydomain = example.com                                                  // 自ドメイン名
</span><span class='line'>myorigin = $mydomain                                                    // 送信元ドメイン名
</span><span class='line'>inet_interfaces = localhost                                             // 待ち受けるネットワークインタフェース
</span><span class='line'>mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain  // ローカルで受信するドメイン名
</span><span class='line'>home_mailbox = Maildir/                                                 // メールボックス形式
</span><span class='line'>smtpd_banner = $myhostname ESMTP unknown                                // バージョン非表示
</span></code></pre></td></tr></table></div></figure>


<p>Maildir形式のメールボックスを使うので、新規ユーザ用にスケルトンを作っておく。既存ユーザのメールボックスを移行する場合はググればすぐ見つかります。</p>

<pre><code>$ sudo mkdir -p /etc/skel/Maildir/{new,cur,tmp}
$ sudo chmod -R 700 /etc/skel/Maildir/
</code></pre>

<p>メール送信できるか確認</p>

<pre><code>$ echo "test message." | mail -s test &lt;受信確認用の外部のメールアドレス&gt;
$ echo "test message." | mail -s test &lt;受信確認用のローカルユーザ&gt;
</code></pre>

<p>外部のメールアドレスにメールが届くのと、ローカルユーザの$HOME/Maildir/newにメールが届いていることを確認します。</p>

<h2>logwatchの設定</h2>

<p>と言っても、今回はlogwatch自体は設定しません。ログレベルやアーカイブ有無など設定したい場合は/etc/logwatch/conf/logwatch.confを編集します。</p>

<p>設定するのはこっち。logwatchはデフォルトでroot宛てのメール転送先を設定します。</p>

<figure class='code'><figcaption><span>/etc/aliases</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>root: example@example.com
</span></code></pre></td></tr></table></div></figure>


<p>logwatchをインストールすると/etc/cron.daily/00logwatchも作られるので、ほっといても1日1回メール送信されます。が、コマンドでメール送信できるので確認しておきます。</p>

<pre><code>$ logwatch --mailto root
</code></pre>

<p>とりあえずこれで簡単にログ監視できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cronの中でsudoを使う方法]]></title>
    <link href="http://blog.withweb.info/blog/2012/10/06/script-enable-sudo-in-cron/"/>
    <updated>2012-10-06T19:30:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/10/06/script-enable-sudo-in-cron</id>
    <content type="html"><![CDATA[<p>jenkins(実行ユーザ:jenkins)のcronでsudoを使う必要があり、/etc/sudoersの設定を変えたのでメモ。</p>

<p>こんな感じで設定しました。</p>

<figure class='code'><figcaption><span>ユーザ:jenkinsをtty(コンソール)無しでsudoさせる</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ sudo /usr/sbin/visudo
</span><span class='line'>
</span><span class='line'>#Defaults requiretty           # tty無しの場合sudoさせない(コメントアウト)
</span><span class='line'>Defaults:jenkins !requiretty   # ユーザjenkinsはtty無しでsudo可能
</span><span class='line'>jenkins ALL=(ALL) NOPASSWD:ALL # ユーザjenkinsはパスワード無しでsudo可能
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>ちょっと解説</h2>

<p>sshコマンドやcronの中でsudoを使うスクリプトを使う場合によくあるケースなんですが</p>

<pre><code>sudo: sorry, you must have a tty to run sudo
</code></pre>

<p>こんなエラーで止まることがあります。これは、/etc/sudoersの設定でtty(コンソール)とつながってないsudoが禁止されているためです。</p>

<p>/etc/sudoersの下の行をコメントアウトするか、!requirettyを指定するとこの設定を無効化できます。</p>

<pre><code>Defaults requiretty
</code></pre>

<p>が、クラッキング目的で進入したソフト等からsudoされないようにするのが目的なので、安易に外すのもいかがなものかと思うわけです。(効果があるかどうかは置いといて)</p>

<p>というわけで、今回は特定のユーザのみsudoを許可する設定を行いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala+PlayFramework2はじめました]]></title>
    <link href="http://blog.withweb.info/blog/2012/10/05/scala-playframework/"/>
    <updated>2012-10-05T17:30:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/10/05/scala-playframework</id>
    <content type="html"><![CDATA[<p>最近Scalaが人気あるみたいですね。Twitterがバックエンドで使ってることも話題になりました。そんなScalaに興味がでてきたので、とっかかりが簡単そうなPlay Framework2と合わせて触ってみます。</p>

<p>ドキュメントが充実してるからわざわざ書くことはあんまりないんだけど、最初は大まかな流れが分かればいいんじゃないかと思います。</p>

<!-- more -->


<h2>インストール</h2>

<p>JDK6以降が前提です。あとは特に何も言う事が無いくらい簡単。<a href="http://playdocja.appspot.com/">日本語公式サイト</a>からzipファイルをダウンロードして、展開してパスを通すだけです。</p>

<p>今回はMacのHomebrewにパッケージがあったのでそっちでインストールします。</p>

<pre><code>$ brew install play
</code></pre>

<h2>アプリ作成の流れ</h2>

<p>大まかな流れはこんな感じ。分かりやすくていい感じ。</p>

<ol>
<li>playコマンドでアプリケーションを作成する</li>
<li>URLとコントローラを対応付ける</li>
<li>コントローラ(+モデル)を実装する</li>
<li>2〜3の繰り返し</li>
</ol>


<h2>playコマンドでアプリケーションを作成する</h2>

<pre><code>$ play new sample
</code></pre>

<p>対話式にアプリケーション名とテンプレートの選択をします。テンプレートは下の3つから選びますが、今回はScalaを使いたいので1を選びます。</p>

<ol>
<li>Scalaアプリケーション</li>
<li>Javaアプリケーション</li>
<li>空のアプリケーション</li>
</ol>


<p>この時点で起動できます。やり方はこんな感じ。</p>

<pre><code>$ play  # playコンソール起動
$ run   # playコンソール内でアプリケーション起動
</code></pre>

<p>http://localhost:9000にアクセスするとwelcome画面が表示されます。サーバ起動しっぱなしでもソース変更すれば反映されるので、止めずにこのまま進めます。</p>

<p><img src="http://blog.withweb.info/images/20121005-playframework-welcome.png" title="playframework welcome" alt="image playframework welcome" /></p>

<h2>URLとコントローラを対応付ける</h2>

<p>conf/routesにルートを追加します。このURLにアクセスした時に対応したコントローラのメソッドが実行されます。</p>

<p>とりあえずGETで/helloを追加。Applicationクラスにメソッドを追加してみます。</p>

<figure class='code'><figcaption><span>conf/routes</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># Home page
</span><span class='line'>GET     /                       controllers.Application.index
</span><span class='line'>
</span><span class='line'># Hello
</span><span class='line'>GET     /hello                  controllers.Application.hello
</span></code></pre></td></tr></table></div></figure>


<h2>コントローラ(+モデル)を実装する</h2>

<p>とりあえずモデルは置いといて、Application.scalaに追記します。</p>

<figure class='code'><figcaption><span>Application.scala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">controllers</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="s">&quot;Your new application is ready.&quot;</span><span class="o">))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 信頼と実績のアレ</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">hello</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="s">&quot;Hello, world!&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>http://localhost:9000/helloにアクセスすると、「Hello, world!」が表示されます。</p>

<p><img src="http://blog.withweb.info/images/20121005-playframework-hello.png" title="playframework hello" alt="image playframework hello" /></p>

<p>とりあえず触ってみるレベルではとても簡単です。J2EEでの作り方とはずいぶん違いますね。XML地獄が無いだけでもすごくありがたい。</p>

<p>ScalaもPlay Framework2もいろいろ作ってみるのはこれからになりますが、なかなか楽しそうです。</p>

<h2>参考ページ</h2>

<ul>
<li><a href="http://playdocja.appspot.com/documentation/2.0.3/Home">Documentation: Home — Playframework</a></li>
<li><a href="https://github.com/playframework-ja/Play20/wiki">Play 2.0 ドキュメント · playframework-ja/Play20 Wiki · GitHub</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressでブログしよう]]></title>
    <link href="http://blog.withweb.info/blog/2012/10/04/octopress/"/>
    <updated>2012-10-04T23:00:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/10/04/octopress</id>
    <content type="html"><![CDATA[<p>普通のブログってやつがとても面倒なんです。</p>

<p>CMSにログインしたり画像アップロードしたり謎エディタで記事書いたり公開ボタン押したりバックアップするのにプラグイン入れたりとか、やってられない。</p>

<p>手元のエディタで記事を書いてコマンド打ったら公開。そんな感じで楽したいのでOctopressに移行します。いまさら感が半端ないけどね。</p>

<!-- more -->


<h2>構成</h2>

<ul>
<li>Octopress ブログエンジン。Markdownで記事を書いてhtmlに出力する。</li>
<li>Bitbucket ソース管理。Octopressのディレクトリを管理する。</li>
<li>GitHub サイトの公開場所。Octopressで出力したhtmlなどを置く。</li>
</ul>


<p>ソースはとりあえずBitbucketのプライベートリポジトリに置くことにします。なんとなくですが。</p>

<h2>GitHub Pagesの準備</h2>

<p>gitのインストール、SSH Keysの登録が終わっている前提で、<a href="https://github.com/new">Create a New Repo</a>でUSERNAME.github.comの名前でリポジトリを作ります。</p>

<p>USERNAMEは各自置き換えてくださいね。</p>

<h2>Octopressインストール</h2>

<p>まずは、USERNAME.github.comでアクセスできるようにするところまで。</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress
$ sudo gem install bundler
$ sudo bundle install
$ rake install

$ rake setup_github_pages
# Enter the read/write url for your repository:
# git@github.com:USERNAME/USERNAME.github.com.gitを入力します。

$ rake generate
$ rake deploy
</code></pre>

<p>独自ドメイン（サブドメイン）で運用したいので、ドメイン会社のサイトでDNSの設定をしておきます。</p>

<pre><code>サブドメイン：blog
種別：CNAME
内容：USERNAME.github.com
</code></pre>

<p>OctopressにCNAMEファイルを作ります。_config.ymlも書き換えて、タイトルやURLなどちゃんとしたものに設定しておきましょう。</p>

<pre><code>$ echo 'blog.withweb.info' &gt; source/CNAME
$ rake generate
$ rake deploy
</code></pre>

<p>あとは、記事をどんどん追加していくだけ。</p>

<h2>記事を書いて投稿する</h2>

<p>これだけ覚えておけばだいたいいける。記事やページの追加はコマンド打たなくてもsource/_postsの中にMarkdownのファイルを突っ込むだけでいけるみたい。</p>

<pre><code>$ rake new_post["title"] # 新規記事を作成
$ rake new_page["title"] # 新規ページを作成
$ rake generate          # 記事をhtmlに変換
$ rake preview           # プレビュー(localhost:4000)
$ rake deploy            # 記事を公開(GitHub Pagesにデプロイ)
</code></pre>

<h2>サイトの運用</h2>

<p>ソースはBitbucketにするのでリモートリポジトリを追加します。</p>

<pre><code>$ git remote add bitbucket git@bitbucket.org:USERNAME/octopress.git
$ git push -u bitbucket source
</code></pre>

<p>あとはpushしていけば記事のバックアップをとっていけます。</p>

<pre><code>$ git add .
$ git commit -m 'commit message'
$ git push
</code></pre>

<h2>Octopressの更新</h2>

<p>Octopress自体を更新する場合は、本家の更新を取り込んでマージします。その後、ソースとスタイルを更新してpush、デプロイします。</p>

<pre><code>$ git fetch octopress
$ git pull octopress master
$ bundle install
$ rake update_source
$ rake update_style
$ rm -rf sass.old
$ rm -rf source.old
$ git push
$ rake deploy
</code></pre>

<h2>参考ページ</h2>

<ul>
<li><a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで - T.I.D.</a></li>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる - Glide Note - グライドノート</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPSのファイアウォール設定を見直す]]></title>
    <link href="http://blog.withweb.info/blog/2012/05/22/vps-iptables/"/>
    <updated>2012-05-22T17:50:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/05/22/vps-iptables</id>
    <content type="html"><![CDATA[<p>自分しか使わないサーバとはいえ、あんまり考えずに設定をしてたので見直し。</p>

<!-- more -->


<h2>ポリシー</h2>

<ul>
<li>受信パケットは原則破棄</li>
<li>送信パケットは原則通過</li>
<li>転送パケットは原則破棄</li>
<li>ローカルループバックからの受信を許可</li>
<li>セッションが確立した後の受信を許可</li>
<li>SYN Cookies有効</li>
<li>ブロードキャスト宛のPINGに応答しない</li>
<li>ICMP Redirectパケットを破棄</li>
<li>Source Routedパケットを破棄</li>
<li>フラグメント化されたパケットを破棄</li>
<li>NetBIOS関連のパケットを破棄</li>
<li>1秒間に4回を超えるPINGを破棄</li>
<li>ブロードキャスト、マルチキャスト宛のパケットを破棄</li>
<li>113番ポート(IDENT)の受信は拒否応答</li>
<li>指定サービスの受信を許可</li>
<li>その他のアクセスはログ記録して破棄</li>
</ul>


<p>ひとまず特定の国やIPはブロックしていませんが、後で手を入れていくことになると思うのでこんな感じのスクリプトにしてます。</p>

<h2>スクリプト</h2>

<pre><code>#!/bin/bash

########################################
# 前処理
########################################

# ファイアウォール停止
/etc/rc.d/init.d/iptables stop

########################################
# 基本設定
########################################

# デフォルトルール
iptables -P INPUT DROP
iptables -P OUTPUT ACCEPT
iptables -P FORWARD DROP

# 自ホストからのアクセスを許可
iptables -A INPUT -i lo -j ACCEPT

# セッションが確立した後は許可
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

########################################
# 攻撃対策
########################################

# SYN Cookies有効(TCP SYN Flood攻撃対策)
sysctl -w net.ipv4.tcp_syncookies=1 &gt; /dev/null
sed -i '/net.ipv4.tcp_syncookies/d' /etc/sysctl.conf
echo "net.ipv4.tcp_syncookies=1" &gt;&gt; /etc/sysctl.conf

# ブロードキャストアドレス宛pingには応答しない(Smurf攻撃対策)
sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1 &gt; /dev/null
sed -i '/net.ipv4.icmp_echo_ignore_broadcasts/d' /etc/sysctl.conf
echo "net.ipv4.icmp_echo_ignore_broadcasts=1" &gt;&gt; /etc/sysctl.conf

# ICMP Redirectパケットは拒否
sed -i '/net.ipv4.conf.*.accept_redirects/d' /etc/sysctl.conf
for dev in `ls /proc/sys/net/ipv4/conf/`
do
    sysctl -w net.ipv4.conf.$dev.accept_redirects=0 &gt; /dev/null
    echo "net.ipv4.conf.$dev.accept_redirects=0" &gt;&gt; /etc/sysctl.conf
done

# Source Routedパケットは拒否
sed -i '/net.ipv4.conf.*.accept_source_route/d' /etc/sysctl.conf
for dev in `ls /proc/sys/net/ipv4/conf/`
do
    sysctl -w net.ipv4.conf.$dev.accept_source_route=0 &gt; /dev/null
    echo "net.ipv4.conf.$dev.accept_source_route=0" &gt;&gt; /etc/sysctl.conf
done

# フラグメント化されたパケットは破棄
iptables -A INPUT -f -j LOG --log-prefix '[IPTABLES FRAGMENT] : '
iptables -A INPUT -f -j DROP

# NetBIOS関連のアクセスは破棄
iptables -A INPUT -p tcp -m multiport --dports 135,137,138,139,445 -j DROP
iptables -A INPUT -p udp -m multiport --dports 135,137,138,139,445 -j DROP
iptables -A OUTPUT -p tcp -m multiport --sports 135,137,138,139,445 -j DROP
iptables -A OUTPUT -p udp -m multiport --sports 135,137,138,139,445 -j DROP

# 1秒間に4回を超えるpingは破棄(Ping of Death攻撃対策)
iptables -N LOG_PINGDEATH
iptables -A LOG_PINGDEATH -m limit --limit 1/s --limit-burst 4 -j ACCEPT
iptables -A LOG_PINGDEATH -j LOG --log-prefix '[IPTABLES PINGDEATH] : '
iptables -A LOG_PINGDEATH -j DROP
iptables -A INPUT -p icmp --icmp-type echo-request -j LOG_PINGDEATH

# 全ホスト(ブロードキャストアドレス、マルチキャストアドレス)宛パケットは破棄
iptables -A INPUT -d 255.255.255.255 -j DROP
iptables -A INPUT -d 224.0.0.1 -j DROP

# 113番ポート(IDENT)へのアクセスには拒否応答(メールサーバ等のレスポンス低下防止)
iptables -A INPUT -p tcp --dport 113 -j REJECT --reject-with tcp-reset

########################################
# 各種サービス設定
########################################

# SSH
iptables -A INPUT -p tcp --dport 22 -j ACCEPT

# HTTP, HTTPS
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT

########################################
# その他
########################################

# 上記のルールにマッチしなかったアクセスはログを記録して破棄
iptables -A INPUT -m limit --limit 1/s -j LOG --log-prefix '[IPTABLES INPUT] : '
iptables -A INPUT -j DROP
iptables -A FORWARD -m limit --limit 1/s -j LOG --log-prefix '[IPTABLES FORWARD] : '
iptables -A FORWARD -j DROP

########################################
# 後処理
########################################

# サーバー再起動時にも上記設定が有効となるようにルールを保存
/etc/rc.d/init.d/iptables save

# ファイアウォール起動
/etc/rc.d/init.d/iptables start
</code></pre>

<p>何か変なことしてたらツッコミお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[さくらのVPS 2G(CentOS6)で最初にやったことメモ]]></title>
    <link href="http://blog.withweb.info/blog/2012/05/20/sakura-vps2g-centos6/"/>
    <updated>2012-05-20T20:26:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2012/05/20/sakura-vps2g-centos6</id>
    <content type="html"><![CDATA[<p>さくらのVPS 2Gを借りたので、最初にやったことをメモ。どこかに書かないと忘れちゃう。</p>

<!-- more -->


<h2>ユーザ</h2>

<p>まずはrootのパスワードを変更。</p>

<pre><code># passwd
</code></pre>

<p>直接rootでログインしたくないので一般ユーザをwheelグループで作る。</p>

<pre><code># useradd &lt;ユーザID&gt; -g wheel
# passwd &lt;ユーザID&gt;
</code></pre>

<p>wheelグループをパスワードなしでsudoできるようにする。</p>

<pre><code># visudo
%wheel ALL=(ALL) NOPASSWD:ALL
</code></pre>

<h2>SSH</h2>

<p>一般ユーザの公開鍵を登録。authorized_keysの中身はローカルPCで作った公開鍵からコピペ。</p>

<pre><code># cd /home/&lt;ユーザID&gt;
# mkdir .ssh
# chmod 700 .ssh
# vi .ssh/authorized_keys
# chmod 600 .ssh/authorized_keys
# chown -R &lt;ユーザID&gt;:wheel .ssh
</code></pre>

<p>SSHの設定。ポート番号を変えて、rootログイン禁止、パスワード認証を止めて鍵交換方式で認証する。</p>

<pre><code># vi /etc/ssh/sshd_config
Port &lt;SSHのポート番号&gt;
PermitRootLogin no
PubkeyAuthentication yes
PasswordAuthentication no
</code></pre>

<p>ひと通り設定したらサービスを再起動。</p>

<pre><code># service sshd restart
</code></pre>

<h2>ファイアウォール</h2>

<p>とりあえずHTTPとSSHを通す。色々なサイトで紹介されているものをベースにしてます。</p>

<pre><code># vi /etc/sysconfig/iptables
*filter
:INPUT   ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT  ACCEPT [0:0]
:RH-Firewall-1-INPUT - [0:0]

-A INPUT -j RH-Firewall-1-INPUT
-A FORWARD -j RH-Firewall-1-INPUT
-A RH-Firewall-1-INPUT -i lo -j ACCEPT
-A RH-Firewall-1-INPUT -p icmp --icmp-type any -j ACCEPT
-A RH-Firewall-1-INPUT -p 50 -j ACCEPT
-A RH-Firewall-1-INPUT -p 51 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp --dport 5353 -d 224.0.0.251 -j ACCEPT
-A RH-Firewall-1-INPUT -p udp -m udp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -p tcp -m tcp --dport 631 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# HTTP, SSH
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80    -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport &lt;SSHのポート番号&gt; -j ACCEPT

-A RH-Firewall-1-INPUT -j REJECT --reject-with icmp-host-prohibited

COMMIT
</code></pre>

<h2>不要なサービスの停止</h2>

<p>わざわざ止めるほどサービスが起動していなかったけど、いくつか止めておいた。</p>

<pre><code># chkconfig lvm2-monitor off
# chkconfig yum-updateonboot off
</code></pre>

<h2>メモリ使用量を確認</h2>

<pre><code># free
             total       used       free     shared    buffers     cached
Mem:       2054808     139612    1915196          0       8312      57288
-/+ buffers/cache:      74012    1980796
Swap:      2096472          0    2096472
</code></pre>

<p>メモリ使用量は140MBくらい。素の状態ならこんなもんでしょう。</p>

<h2>まとめ</h2>

<p>ひとまず使い始める前の設定は最低限できたかな。ログ監視くらいはこの時点で入れておけばよかったかも。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URoad-8000が802.11nに対応]]></title>
    <link href="http://blog.withweb.info/blog/2011/12/28/uroad-8000/"/>
    <updated>2011-12-28T03:50:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/12/28/uroad-8000</id>
    <content type="html"><![CDATA[<p>何となくURoad-8000の自動アップデートをしてみたら2011/12/26のアップデートで802.11nに対応したようです。私はあまり気にしていなかったのですが、URoad-8000ユーザは待っていた人も多いんじゃないでしょうか。</p>

<!-- more -->


<h2>IEEE 802.11Nって何？</h2>

<p>簡単に言うと、IEEEという学会が決めた無線LANの規格です。802.11g、802.11a、802.11bあたりとまとめて802シリーズなんて呼ばれたりします。 他の802シリーズと比較すると</p>

<ul>
<li>速い</li>
<li>安定している</li>
<li>カバーエリアが広い</li>
</ul>


<p>という特徴があります。</p>

<p>イマドキのルータはだいたい対応していそうなので、知らないうちにご家庭の無線LANが11nということも多いかと思います。</p>

<h2>Macで通信規格を確認する方法</h2>

<p>ネットワークユーティリティで確認できますが、もっと簡単な方法があります。</p>

<p>メニューバーのAirMacアイコンをoptionキーを押しながらクリックすると詳細情報が表示されます。</p>

<p><img src="http://blog.withweb.info/images/20111228-mac-network-config-view.png" title="mac network config view" alt="image mac network config view" /></p>

<p>通信規格、セキュリティなどいろいろ表示されるので今何を使っているのか簡単に確認できます。（近所にWi-Fiを使っている人が多いのか、たくさん表示されてますがそこは気にしないで）</p>

<p>この「optionキーを押しながらクリック」は他のメニューにも使えます。</p>

<p>例えば、Bluetoothならアドレスの確認、サウンドなら入出力装置の切り替えなどの項目が追加されます。いちいちシステム環境設定を起動しなくてすむので便利ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacBook Air 13インチ (mid 2011) を買いました]]></title>
    <link href="http://blog.withweb.info/blog/2011/11/05/macbook-air/"/>
    <updated>2011-11-05T06:13:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/11/05/macbook-air</id>
    <content type="html"><![CDATA[<p>新しいMacBook Airが欲しいけどいつ買おうか。何となく決め手が無い。</p>

<p>7月21日に発売されてから3ヶ月以上も迷った末に、結局買いました。</p>

<!-- more -->


<h2>引っ越しの荷物を減らしたい</h2>

<p>買う決心をした理由はこれです。というか、これだけです。</p>

<p>東京から広島へ引越すことになり「荷物を減らしたいなー」ということで、iMacから乗り換えるべく注文していたMacBook Airが届きました。</p>

<p><img src="http://blog.withweb.info/images/20111105-macbook-air-package.png" title="macbook air package" alt="image macbook air package" /></p>

<p>なんかもう箱からして薄い。</p>

<p>前に使っていたiMac(early 2009)はまだまだ普通に使えますが、リセールバリューを考えると3年半使ったのは長過ぎた気がします。売れるうちに売ってしまいます。</p>

<h2>スペックは適当に選んだ</h2>

<p>今回買ったスペックは13インチの高い方です。キーボードだけカスタマイズしています。</p>

<ul>
<li>サイズ：13インチ</li>
<li>CPU：1.7GHz i5</li>
<li>メモリ：4GB</li>
<li>ストレージ：256GB</li>
<li>キーボード：US</li>
</ul>


<p>利用シーンが単純なのでスペックも単純に決めました。</p>

<ul>
<li>家で使う</li>
<li>メインマシン（これ1台）</li>
<li>外に持ち出すことがあるかも（ないかも）</li>
<li>Webサービスやアプリの開発をする</li>
<li>だいたい2年くらいで買い替える</li>
</ul>


<p>スペック選びは悩む人が多いと思いますが、どのくらいの期間使うか決めておけば案外割り切って選べると思います。</p>

<p>キーボードは慣れでUSにしています。打つ時は見ないのでこだわりはありません。</p>

<p><img src="http://blog.withweb.info/images/20111105-macbook-air-keyboard.png" title="macbook air keyboard" alt="image macbook air keyboard" /></p>

<p>ファンクションキーの列もLion仕様になってます。写ってないけど右端のイジェクトキーも電源キーに変わっています。</p>

<h2>使い勝手</h2>

<p>そろそろ聞き飽きてきた頃ですが、SSDのおかげで全体的に静かで速いです。</p>

<p>今のところアプリの起動も操作も「待たされる感」がありません。VirtualBoxでWindowsを起動した時なんてもう意味が分からないレベルです。</p>

<p>あと関係ないけど、MacBook Airって大根とか切れそうなくらい薄いですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 4Sが届いた]]></title>
    <link href="http://blog.withweb.info/blog/2011/11/02/iphone4s/"/>
    <updated>2011-11-02T00:51:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/11/02/iphone4s</id>
    <content type="html"><![CDATA[<p>もう届いたと言うか、やっと届いたと言うか。<a href="http://blog.withweb.info/blog/2011/10/21/iphone4s/">ソフトバンクオンラインショップで注文していたiPhone 4S</a>が届きました。発売前から機種変更したかったからうれしいですね。</p>

<!-- more -->


<h2>いつものApple</h2>

<p><img src="http://blog.withweb.info/images/20111102-iphone4s-package.png" title="iphone4s package" alt="image iphone4s package" /></p>

<p>箱です。相変わらずのシンプル梱包。</p>

<p>MacやiPodもそうですが、この「Apple製品のシンプルさ」が好きな人は多いのではないかと。</p>

<p>説明書もペラペラの紙が入ってるだけ。日本の携帯電話も見習って欲しいところです。</p>

<h2>予約から受け取りまでの流れ</h2>

<p>だいたいこんな感じです。</p>

<ol>
<li>2011/10/19：ソフトバンクオンラインショップで予約</li>
<li>2011/10/19：メール受信「ご予約お申し込み受付のご連絡」</li>
<li>2011/10/30：メール受信「本申し込みの依頼」</li>
<li>2011/10/30：ソフトバンクオンラインショップで本申し込み</li>
<li>2011/10/30：メール受信「お申し込み受付のご連絡」</li>
<li>2011/10/30：メール受信「商品発送手続き開始のご連絡」</li>
<li>2011/10/31：メール受信「出荷完了のご連絡」</li>
<li>2011/11/01：iPhone4S到着</li>
</ol>


<p>予約からしばらくは入荷待ちですが、用意できてからはすぐ届きました。</p>

<p>本申し込みの時に受け取りの日時指定ができます。運送業者は佐◯。（佐◯はいつも時間指定を守らないのでヤマトにして欲しかった&#8230;）</p>

<h2>機種変更作業</h2>

<p>オンラインショップで買った場合、電話の切り替えとか自分でやります。</p>

<p>「めんどくさそー」と思ってましたがそんなことはなかった。簡単でした。</p>

<p>ソフトバンクから届くメール「出荷完了のご連絡」に商品到着後の手続きについて書かれているのでその通りにします。</p>

<h2>電話機切替手続き</h2>

<p>Webと電話のどちらかで手続きします。私はWebでやりました。</p>

<p>予約した時の受付番号とメールアドレス、生年月日を入力すれば完了です。</p>

<h2>アクティベーション</h2>

<p>iTunesにつないで、言われるがままに進めます。</p>

<p>もともとiTunesを使っていたからか、項目は基本的に入力済。よくある「同意する」チェックを付ける程度で完了です。</p>

<h2>3GSから4Sへのデータ移行</h2>

<p>アクティベーションが終わった後で復元するか聞かれるのでそのまま進めます。</p>

<p>あとは同期と同じ要領で待つだけ。超簡単。</p>

<h2>サクサク</h2>

<p>もういろんなサイトで言われている通り、ぱっと見た感じはiPhone4です。</p>

<p>少し触っただけですが本当にサクサク動きます。（3GSからの機種変更だから？）</p>

<p>これもそのうち「重いなー」と思う時が来るんだろうけど、新しいうちはこのサクサク感がうれしいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 4Sをソフトバンクオンラインショップで予約した]]></title>
    <link href="http://blog.withweb.info/blog/2011/10/21/iphone4s/"/>
    <updated>2011-10-21T03:05:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/10/21/iphone4s</id>
    <content type="html"><![CDATA[<p>待ちに待ったiPhoneの最新機種。もう買って手元に届いた人も多いんじゃないでしょうか。</p>

<p>ソフトバンクだけでなくauからも発売される事や予約の行列、販売台数などなど、発売前も後も世間で熱い話題ですね。</p>

<p>そんなiPhone4Sを予約しました。</p>

<!-- more -->


<h2>やっと予約した</h2>

<p>発売日の前後は帰省したりでバタバタしていたので、帰宅後にソフトバンクオンラインショップで予約しました。もう乗り遅れてる感が満載です。</p>

<p>iPhone4もiPhone4Sも予約開始当日は激混みだったようですが、さすがにオンラインショップも混み合うこともなくスイスイ進みました。乗り遅れて良かったかも。</p>

<p>今回予約したのはiPhone 4S 64GBの黒。</p>

<ul>
<li>白だと汚れが目立ちそうだから黒</li>
<li>今は16GBでも十分だけど写真たくさん撮りたいから64GB</li>
</ul>


<p>理由なんて簡単なものです。</p>

<h2>下調べはほとんどしていない</h2>

<p>先にキャリアの回線、価格、キャンペーンの比較をしておけば良かったんですが、ネットで少し調べただけです。</p>

<p>さらっと眺めてみた印象としては</p>

<ul>
<li>価格は正直たいして変わらない</li>
<li>回線は正直どっちもどっち(基本的にWifi使うし)</li>
<li>3GSから乗り換えるならソフトバンクがお得？</li>
</ul>


<p>といったところです。</p>

<p>3GSの割賦金が残っているのでソフトバンクの「実質無償機種変更キャンペーン」を使いました。簡単に言うと「残っている割賦金を月々の割引でチャラにしてくれる」ようです。お得じゃないですか。即決。</p>

<p>他にもiPad2が月額料金0円から使えるようですが、端末代がタダになるわけではないのでトータルコストはWifi版とあまり変わらないみたいです。</p>

<p>iPadは今欲しいわけでもないし、買うならWifi版で十分なのでこれは見送りました。</p>

<h2>あとは待つだけ</h2>

<p>単純に楽しみです。引取りに行く手間も無いのでのんびり待ってます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webデザイナーとエンジニアにとってのフレームワークは違うもの？]]></title>
    <link href="http://blog.withweb.info/blog/2011/10/02/framework/"/>
    <updated>2011-10-02T02:41:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/10/02/framework</id>
    <content type="html"><![CDATA[<p>Webデザイナーの方と話している時に話がかみ合わないことがありました。</p>

<p>どうやら両者の間では「フレームワーク」という言葉の意味するところが微妙に違うようです。</p>

<p>ちょっとしたことでしたが、こういうのは意外と戸惑いますね。</p>

<!-- more -->


<h2>何が違うのか</h2>

<p>大雑把に言うと、Webデザイナーにとっての「フレームワーク」はエンジニアにとっての「テンプレート」のことのようです。</p>

<p>広い意味ではテンプレートもフレームワークに含まれるかもしれないので、どちらが正しいという話では無いかなと思います。</p>

<p>ただ、エンジニアにとっては別物という印象があるので話がかみ合わなくなるみたいですね。</p>

<h2>エンジニアにとってのフレームワーク</h2>

<p><a href="http://e-words.jp/w/E38395E383ACE383BCE383A0E383AFE383BCE382AF.html">IT用語辞典</a>に詳しく載っていますが、アプリ開発で必要になる汎用的な機能を仕組みとして提供してくれるものです。</p>

<p>MVC分離、O/Rマッピング、ページ遷移など、アプリケーションの基盤や汎用的な処理部品はフレームワークに任せることで、開発者はビジネスロジックの実装に注力できる。というものですね。</p>

<p>Web系の開発で使われるものだと、このあたりが有名でしょうか。</p>

<ul>
<li>Struts</li>
<li>cakePHP</li>
<li>Django</li>
<li>Ruby on Rails</li>
</ul>


<h2>Webデザイナーにとってのフレームワーク</h2>

<p>Webデザイナーの方との会話で聞いたのはこのあたりです。</p>

<ul>
<li>G5 Frameworkなどのグリッドシステム</li>
<li>WordPressなどでのあまりCSS設定されていないテーマ</li>
</ul>


<p>基本的にHTML、CSSなどのテンプレートのようですね。それを基に手を入れていく感じでしょうか。</p>

<h2>まとめ</h2>

<p>おそらくエンジニアが違和感を感じるポイントは「&#8221;直接編集するもの&#8221;をフレームワークと呼んでいる」ところだと思います。</p>

<p>ただ、あくまでも私の経験というか感覚によるものなので、もちろん一概に言えることではありません。</p>

<p>この記事はかなり偏った視点になっていると思います。できればいろんな方のご意見を聞きたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[タバコをやめる前に試してみたこと]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/25/try-stop-smoking/"/>
    <updated>2011-09-25T08:47:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/25/try-stop-smoking</id>
    <content type="html"><![CDATA[<p>以前からタバコをやめようと思っていました。</p>

<p>増税による値上がりや健康に悪いなど理由はいくらでもありますが、そんなのは後からついてくるもの。今回は「自分でやめると決めたからやめる」という単純かつ強力なものです。</p>

<p>せっかくなので、やめる前に自分の体でちょっとした実験をしてみました。</p>

<!-- more -->


<h2>はじめに</h2>

<p>この記事は私の体で試してみた結果です。</p>

<p>これから禁煙を始めてみようと思う方への参考になるかもしれませんが、あくまでも1例です。他の方にも当てはまるとは限りません。</p>

<h2>実験の前に</h2>

<p>禁煙を始めた人に立ちはだかるのが「離脱症状」です。</p>

<p>これは、ニコチンに依存していた身体の中から、ニコチンが抜けていく過程で起こるさまざまな症状です。</p>

<p>症状自体も期間もかなり個人差があるようですが、このあたりが良くある症状みたいです。</p>

<ul>
<li>体がだるい</li>
<li>眠い</li>
<li>イライラする</li>
<li>頭痛がする</li>
<li>落ち着かない</li>
</ul>


<p>当たり前のように私にも立ちはだかりました。</p>

<h2>被験者のスペック</h2>

<p>だいたいこんな感じです。平均よりタバコの量が多いですかね。</p>

<ul>
<li>喫煙期間は10年以上</li>
<li>量は1日3〜4箱(60〜80本)</li>
<li>銘柄はマールボロ・ライト・メンソール(タール8mg/ニコチン0.8mg)</li>
</ul>


<h2>実験内容</h2>

<p>ある期間を禁煙した後で、タバコを吸った前後の感想を記録します。</p>

<p>禁煙した人がどんな状況になるのか、その後タバコを吸うとどんな気持ちになるのか。本格的に禁煙する前に知っておきたくなったんです。</p>

<p>ただ、あまり長期間やると実際に禁煙するころには心が折れているかもしれないので、適当に短期間にします。</p>

<p>そこで、一般に失敗しやすい期間と言われている「離脱症状のピーク3日間」と「1週間」を実験期間とします。</p>

<h2>実験結果</h2>

<h3>1日間禁煙(9/6)</h3>

<p>なんてことありません。ミント系のガムを噛むなり冷たい水を飲むなりでどうにでもなります。</p>

<p>タバコを吸った時の感想もちょっと時間が開いた時と変わりませんね。</p>

<h3>2日間禁煙(9/8〜9/9)</h3>

<p>じわじわと落ち着きが無くなってきます。コンビニで買ったボトルガムが半分くらい減りました。</p>

<p>タバコを吸った瞬間は臭くていやな感じがしますが、すぐに慣れて懐かしい気持ちになります。</p>

<h3>3日間禁煙(9/11〜9/13)</h3>

<p>意味が分かりませんがなんだか焦ります。2つ目のボトルガムが無くなりました。</p>

<p>タバコを吸いたいというよりも、手持ち無沙汰な感じです。</p>

<p>タバコを吸った瞬間はかなり臭くて、しばらく気持ち悪くなりました。</p>

<h3>7日間禁煙(9/15〜9/21)</h3>

<p>「タバコが無い」ということが普通に感じます。なんとなくご飯がおいしくなった気もします。</p>

<p>タバコを吸う必要が感じられず、吸うと頭がくらくらします。初めてタバコを吸った日を思い出しました。</p>

<p>吸った後はいやな感じだけが残り、「もう捨ててしまえ」という気持ちでいっぱいです。</p>

<h2>実験を終えて</h2>

<p>やらなきゃ良かった。1週間禁煙した時点でそのままやめちゃえば良かったです。</p>

<p>短期間に繰り返しているので離脱症状は大小ありましたが、1ヶ月間に4回も体験するのは精神的にも肉体的にもかなり辛いですね。</p>

<p>なんだか違う理由になった気がしますが結果的にもう吸いたくありません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wimax通信障害で思ったこと]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/23/wimax/"/>
    <updated>2011-09-23T00:29:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/23/wimax</id>
    <content type="html"><![CDATA[<p>9月21日の17時45分ごろから9月22日の13時ごろまで、東日本エリアで通信障害によりインターネット接続ができない状況が続きました。</p>

<p>この記事を書いている現在は普通につながりますが、ちょっと思ったことを書いてみます。</p>

<!-- more -->


<h2>何があったのか</h2>

<p><a href="http://www.uqwimax.jp/service/information/maintenance/post-4074.html">UQWimaxの発表</a>や各種ニュースによると東日本の16都道府県で約20時間インターネットに繋がらない状況がつづきました。</p>

<p>台風の影響ではなく通信設備の障害のようで、100万件以上のユーザに影響があったようです。</p>

<h2>ルータが赤く点滅すると不安になる</h2>

<p>いままで経験したことがなかったのでルータが壊れたのかと思ってしまいました&#8230;</p>

<p>マニュアルや管理ページで圏外なのはすぐ分かったので、とりあえず待つことにしましたが赤く点滅されると少し不安になりますね。</p>

<p>すぐ気づけるのでいいんですが。</p>

<h2>iPhoneで良かった</h2>

<p>前回の記事<a href="http://blog.withweb.info/blog/2011/09/21/iphone-cost/">iPhoneの請求額がものすごく安くなった</a>を書いたあとで、iPod Touchでもいいんじゃないかという気持ちになっていました。</p>

<p>iPod Touchだと通話はSkypeになるんですが、今回のような通信障害があると通話もできなくなってしまいます。</p>

<p>iPhoneはデータ通信をオフにしていても通話とSMSはできるので、連絡手段がなくなるという状況になることもなく、とりあえずの安心感があったのでこのままiPhoneを使おうと思います。</p>

<h2>実はそんなに困らなかった</h2>

<p>個人的には1日程度ならたいして困りませんでした。一時的に3G回線に切り替えればメールくらいは見れますしね。</p>

<p>不便というか不快だったのは、たまっていたSMSの迷惑メールが大量にきたことくらいですw</p>

<p>このあたりをどう思うかは個人差があると思います。ずっとつながっていたい人はきっと大変ですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhoneの請求額がものすごく安くなった]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/21/iphone-cost/"/>
    <updated>2011-09-21T03:03:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/21/iphone-cost</id>
    <content type="html"><![CDATA[<p>今月の請求額が確定したのでソフトバンクから通知メールがきました。どのくらい安くなったか期待と不安を胸に請求金額を見てみます。(ちょっとワクワクしてます)</p>

<!-- more -->


<h2>半額以下になった</h2>

<p>以前の記事<a href="http://blog.withweb.info/blog/2011/09/11/iphone/">iPhoneのパケット代を安くしてみよう</a>でいくつかやってみた結果。</p>

<p><img src="http://blog.withweb.info/images/20110921-iphone-charge.png" title="iphone charge" alt="image iphone charge" /></p>

<p>3,388円です。</p>

<p>ちなみに今まではだいたい8,000円前後。半額以下になりました！</p>

<h2>内訳を見てみよう</h2>

<p><img src="http://blog.withweb.info/images/20110921-iphone-itemized-statement.png" title="iphone itemized statement" alt="image iphone itemized statement" /></p>

<p>あれ？前に計算した時となんか違う&#8230;</p>

<p>パケットし放題 for スマートフォンって1,029円じゃなかったっけ。</p>

<p>月月割って-1,100円じゃなかったっけ。</p>

<p>両方ともなぜか安くなってますが200円くらいの誤差だし安くなったわけだし。これ以上は気にしないことにします。(携帯の料金はよく分からないなぁ)</p>

<p>あと通話料0円はSkypeのおかげですね。これは料金プラン以上に大きい。</p>

<h2>まとめ</h2>

<p>料金が計算と違うという謎が残りますが大満足の結果です。iPhoneを一括で買った人はさらに安くなりそうです。</p>

<p>どうしたらいいんでしょうね。うれしくて踊り出しそうな勢いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chromeがいつの間にかLionのフルスクリーンに対応していた]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/20/google-chrome-lion/"/>
    <updated>2011-09-20T16:38:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/20/google-chrome-lion</id>
    <content type="html"><![CDATA[<p>何の気なしにウィンドウを最大化した時に気が付いたんですが、いつの間にかMac OS X Lionのフルスクリーンに対応していたみたいです。</p>

<p>アップデートでは例のごとくいろいろと改善されたようですが、Lionユーザ向けには目立った機能として2つ盛り込まれたようです。</p>

<!-- more -->


<h2>フルスクリーンに対応した</h2>

<p>LionユーザにはおなじみのフルスクリーンがChromeでもできるようになりました。</p>

<p>ウィンドウがニュイーンと広がってMission Controlのデスクトップから独立するアレですね。</p>

<p><img src="http://blog.withweb.info/images/20110920-chrome-fullscreen.png" title="chrome fullscreen" alt="image chrome fullscreen" /></p>

<p>ウィンドウ右上の矢印ボタンをクリックするか、Cmd+Control+Fでフルスクリーンになります。</p>

<p>私のiMac 24インチ(1920x1200)だと</p>

<p><img src="http://blog.withweb.info/images/20110920-imac-view.png" title="imac view" alt="image imac view" /></p>

<p>こんな感じです。</p>

<p>余白だらけですね。もっと広い解像度だとほとんど余白になりそうです。</p>

<p>個人的にはあまり使うことはなさそうですが、ブラウザをフルスクリーンで使う人にはなんとなくうれしいのではないでしょうか。</p>

<h2>スクロール時のみスクロールバーが表示される</h2>

<p>これは<a href="http://googlejapan.blogspot.com/2011/09/google-chrome.html">GoogleJapanのブログ</a>を見て知ったのですが、スクロールした時だけウィンドウ右側にスクロールバーが表示されます。iPhoneやiPadユーザにはおなじみなので、よりMacらしさ(Appleらしさ？)が出た感じです。</p>

<p>フルスクリーンもそうですが、こういう細かいインタフェースがデフォルトアプリに近づくことで違和感なく乗り換えられるようになったのではないかと思います。</p>

<p>それにしても、Chromeは自動でアップデートされるので、いつ何が変わったのか意外と気付かないものですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[とてもシンプルなHTML5のサンプルコード]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/16/simple-html5-sample/"/>
    <updated>2011-09-16T21:13:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/16/simple-html5-sample</id>
    <content type="html"><![CDATA[<p>HTML5のサンプルコードを探している時にたまたま見つけたのでちょっと紹介します。</p>

<p>少し古い記事ですがHTMLに記述する各要素についても簡単に説明されているのでイメージしやすく、これから始めてみようという人にもおすすめです。</p>

<!-- more -->


<p>そんなに難しい英語じゃないし機械翻訳でも意味は分かると思います。</p>

<p><a href="http://css-tricks.com/121-what-beautiful-html-code-looks-like/"><img src="http://blog.withweb.info/images/20110916-css-trick.png" title="css trick" alt="link image css trick" /></a></p>

<p>HTML5はXHTML1.1よりもきれいに書けるよ。だからソースコードを更新したぜ！</p>

<p>ということみたいです。</p>

<p>Webデザイン関係でたまに見に行くサイトなんですが、単にCSSトリックというよりWebデザインに関するものがいろいろ紹介されています。</p>

<p>おもしろいサイトも紹介されているので何かと参考になると思います。</p>

<h2>シンプルなソースコードは大切</h2>

<p>HTMLやCSSはW3Cが段階的に仕様を決めていき、各ブラウザのベンダーはその仕様を少し先取りして実装しています。</p>

<p>そのせいか、相応の対応をしないと同じソースコードでもブラウザよって表示に差異がでます。</p>

<p>私見ですが、モダンブラウザだとWebkit系のSafariやChromeはわりと素直で、Gecko系のFireFoxがちょっとバギーな気がします。Operaはよく分かりません。IEはもはや何も言うことがありません。</p>

<p>そのため、修正や運用後のメンテナンスをしやすくするためにもシンプルなソースコードは大切です。</p>

<p>プログラムは「書かなければバグは出ない」のと同じように、分かりやすく書くだけでなく余計な事を書かないのも気をつけたいですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[後で泣かないための個人的なWeb開発環境の作り方]]></title>
    <link href="http://blog.withweb.info/blog/2011/09/13/web-develop/"/>
    <updated>2011-09-13T18:20:00+09:00</updated>
    <id>http://blog.withweb.info/blog/2011/09/13/web-develop</id>
    <content type="html"><![CDATA[<p>開発環境はしばらく使っていくと設定ファイルのゴミなどで散らかってしまいます。パソコンを買い換えたりサーバ環境を壊した時に構築し直すのもかなり面倒です。</p>

<p>運用も復旧も移行も楽にしたい。でも「開発サーバで動くのに本番サーバで動かない」なんてことにはなりたくない。</p>

<p>そんな風に考えたエンジニアが個人的なWeb開発環境を構築してみました。そのまとめです。</p>

<!-- more -->


<h2>仮想化する</h2>

<p>VirtualBoxを使ってLinuxとWindowsを仮想化します。</p>

<p>仮想化しておけば作業用PCとサーバ環境を分られるのでゴミファイルが邪魔になりません。物理的な場所もとらない。</p>

<p>設定ファイルをいじってサーバ環境を壊してもスナップショットから簡単に戻せます。マシン移行、バックアップ、レストアなんかもファイルコピーだけなので簡単です。</p>

<p>Linuxは開発サーバでいろいろ入ってます。</p>

<ul>
<li>Webサーバ(Apache)</li>
<li>DBサーバ(MySQL/SQLite)</li>
<li>内部DNSサーバ(BIND)</li>
<li>APサーバ(WordPress/Redmine/etc)</li>
</ul>


<p>WindowsはIEの動作確認用に入れています。</p>

<p>サービスを追加する時はローカル用のドメイン、バーチャルホスト、DBを追加すれば開発を始められます。</p>

<h2>XAMPPやMAMPは使わない</h2>

<p>Web上で動くものはたいていLinuxサーバで動いています。</p>

<p>そこを軽く見ていると後で泣きをみます。開発サーバと本番サーバは似ていれば似ているほど後が楽です。</p>

<p>個人的にはユニットテストまでならアリだと思いますが、この環境でテストしたつもりになるのはやめておいた方がいいと思います。会社で「テスト終わりました」とか言うと間違いなく怒られます。</p>

<p>AMP(Apache/MySQL/PHP)環境の雰囲気を知りたい人やローカルでWordPress等を動かしてみたい人がとっかかりに使うのは凄くいいと思います。</p>

<p>また、他の言語、ライブラリ、フレームワークを使おうとすると非常に手間がかかり逆に不便です。あくまでもXAMPP、MAMPが提供している範囲で簡単に導入できるようになるソフトです。</p>

<h2>内部DNSサーバを立てておく</h2>

<p>これは本当に便利です。</p>

<p>ルータに内部DNS、プロバイダのDNSを使うように設定します。</p>

<p>これでLAN内のWindows/Mac/iPhoneどこからでも同じURLで開発サーバへアクセスできます。わざわざドメインを取得する必要もないし、hostsファイルにいちいち追加する必要もありません。</p>

<p>Web/DBサーバと比べるとDNSサーバは構築自体の敷居が高いですが、内部向けならあまりやることは無いしネットワークの勉強になると思います。</p>

<h2>まとめ</h2>

<p>要は企業が社内で使うイントラネットの簡易版です。</p>

<p>例えばブログをレンタルサーバ＋独自ドメインで使っている人がこういう環境を構築すると、今まで各サービスの管理画面に参考サイトからコピペしていたものが何だったのかよく分かると思います。</p>
]]></content>
  </entry>
  
</feed>
