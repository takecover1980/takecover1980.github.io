<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hogehoge on withweb</title>
    <link>http://blog.withweb.info/categories/hogehoge/</link>
    <description>Recent content in Hogehoge on withweb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Wed, 28 Nov 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.withweb.info/categories/hogehoge/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PlayFramework2とYahoo!オークションAPIを使ってみた</title>
      <link>http://blog.withweb.info/blog/2012/11/28/playframework-and-yahoo-auction-api/</link>
      <pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>http://blog.withweb.info/blog/2012/11/28/playframework-and-yahoo-auction-api/</guid>
      <description>

&lt;p&gt;Yahoo!オークションAPIを使ってみたくなったので、とりあえず動くものを作ってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://auction.drive7.info&#34;&gt;いまYahoo!オークションで人気の商品はコレ！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://blog.withweb.info/images/20121128-auction-drive7-info.png&#34; alt=&#34;image auction.drive7.info&#34; title=&#34;auction.drive7.info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;いかにもアフィリエイトっぽくてアレな感じのタイトルですね。実際アフィリエイトID使っています。&lt;/p&gt;

&lt;p&gt;適当に用意したカテゴリから検索した結果をパネルっぽく表示して、クリックするとオークションのページに飛べます。&lt;/p&gt;

&lt;h2 id=&#34;準備:2071ee04fd874a7c6fb7692c5452e3b1&#34;&gt;準備&lt;/h2&gt;

&lt;p&gt;だいたいの流れはYahoo!デベロッパーネットワークの&lt;a href=&#34;http://developer.yahoo.co.jp/start/&#34;&gt;ご利用ガイド&lt;/a&gt;に手順が書いてありますが、他に必要になりそうなドキュメントはこのへんです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.yahoo.co.jp/webapi/auctions/&#34;&gt;APIドキュメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.yahoo.co.jp/sample/auctions/&#34;&gt;サンプルコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://developer.yahoo.co.jp/attribution/&#34;&gt;クレジット表示&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2のサンプルコードのページにサンプルリクエストURLが載っているので、ブラウザのURLバーに入れる等で試せます。&lt;/p&gt;

&lt;p&gt;アフィリエイトIDの確認と使い方は&lt;a href=&#34;http://developer.yahoo.co.jp/appendix/auctions/affiliate.html&#34;&gt;アフィリエイトプログラム&lt;/a&gt;に書いてあります。Yahoo!ポイントで受け取るか、バリューコマースを使うか選べるようです。&lt;/p&gt;

&lt;h2 id=&#34;apiを使う:2071ee04fd874a7c6fb7692c5452e3b1&#34;&gt;APIを使う&lt;/h2&gt;

&lt;p&gt;JavascriptにアプリケーションIDを直書きするのはよくないかなぁと思ったので、Webサービスを作ります。&lt;/p&gt;

&lt;p&gt;それだけならYahoo! Pipesで十分だと思いますが、今回は使いたいのでPlay使います。おおまかにはこんな感じです。&lt;/p&gt;

&lt;h3 id=&#34;playframework2:2071ee04fd874a7c6fb7692c5452e3b1&#34;&gt;Playframework2&lt;/h3&gt;

&lt;p&gt;conf/routes&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /yapi controllers.YahooAPI.auction(q: String ?= &amp;quot;book&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;controllers/YahooAPI.scala&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;package controllers

import play.api._
import play.api.mvc._
import play.api.libs._
import play.api.libs.json._
import play.api.libs.ws._

object YahooAPI extends Controller {
  def auction(q: String) = Action { request =&amp;gt;
    val appid = &amp;quot;YOUR_APPID&amp;quot;
    val baseurl = &amp;quot;http://auctions.yahooapis.jp/AuctionWebService/V2/json/search&amp;quot;
    val url = baseurl + &amp;quot;?appid=&amp;quot; + appid + &amp;quot;&amp;amp;query=&amp;quot; + q

    Async {
      WS.url(url).get().map { response =&amp;gt;
        Ok(response.body).as(&amp;quot;application/json&amp;quot;)
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;http://example.com/yapi?q=book&lt;/code&gt;にアクセスするとbookの検索結果がJSONで返ってきます。&lt;/p&gt;

&lt;h3 id=&#34;jquery:2071ee04fd874a7c6fb7692c5452e3b1&#34;&gt;jQuery&lt;/h3&gt;

&lt;p&gt;script.js&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// API呼び出し
$.ajax({
  url: &amp;quot;http://example.com/yapi&amp;quot;,
  data: {
    &amp;quot;q&amp;quot;:&amp;quot;ほげほげ&amp;quot;
  },
  dataType: &amp;quot;jsonp&amp;quot;,
  complete: function() {
    // 終了時の処理
  }
});

// コールバック
function loaded(json) {
  // API呼び出しの結果をゴニョゴニョする
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取得した商品情報をレイアウトすれば完成です。&lt;/p&gt;

&lt;p&gt;いろいろ手を抜いてます。アクセスが多いならYahooのサーバに優しくしておいた方がいいと思います。リクエストをキューでコントロールするとか、同一クエリは数秒キャッシュするとか、複数のアプリケーションIDでローテーションするとか。あ、最後のは違うか。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>